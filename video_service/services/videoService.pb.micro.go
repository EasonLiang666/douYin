// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: videoService.proto

package services

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	"github.com/micro/go-micro/v2/api"
	"github.com/micro/go-micro/v2/client"
	"github.com/micro/go-micro/v2/server"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for VideoService service

func NewVideoServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for VideoService service

type VideoService interface {
	FeedInfo(ctx context.Context, in *FeedRequest, opts ...client.CallOption) (*FeedResponse, error)
	PublishAction(ctx context.Context, in *PublishActionRequest, opts ...client.CallOption) (*PublishActionResponse, error)
	PublishList(ctx context.Context, in *PublishListRequest, opts ...client.CallOption) (*PublishListResponse, error)
	FavoriteAction(ctx context.Context, in *FavoriteActionRequest, opts ...client.CallOption) (*FavoriteActionResponse, error)
	FavoriteList(ctx context.Context, in *FavoriteListRequest, opts ...client.CallOption) (*FavoriteListResponse, error)
	CommentAction(ctx context.Context, in *CommentActionRequest, opts ...client.CallOption) (*CommentActionResponse, error)
	CommentList(ctx context.Context, in *CommentListRequest, opts ...client.CallOption) (*CommentListResponse, error)
}

type videoService struct {
	c    client.Client
	name string
}

func NewVideoService(name string, c client.Client) VideoService {
	return &videoService{
		c:    c,
		name: name,
	}
}

func (c *videoService) FeedInfo(ctx context.Context, in *FeedRequest, opts ...client.CallOption) (*FeedResponse, error) {
	req := c.c.NewRequest(c.name, "VideoService.FeedInfo", in)
	out := new(FeedResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoService) PublishAction(ctx context.Context, in *PublishActionRequest, opts ...client.CallOption) (*PublishActionResponse, error) {
	req := c.c.NewRequest(c.name, "VideoService.PublishAction", in)
	out := new(PublishActionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoService) PublishList(ctx context.Context, in *PublishListRequest, opts ...client.CallOption) (*PublishListResponse, error) {
	req := c.c.NewRequest(c.name, "VideoService.PublishList", in)
	out := new(PublishListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoService) FavoriteAction(ctx context.Context, in *FavoriteActionRequest, opts ...client.CallOption) (*FavoriteActionResponse, error) {
	req := c.c.NewRequest(c.name, "VideoService.FavoriteAction", in)
	out := new(FavoriteActionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoService) FavoriteList(ctx context.Context, in *FavoriteListRequest, opts ...client.CallOption) (*FavoriteListResponse, error) {
	req := c.c.NewRequest(c.name, "VideoService.FavoriteList", in)
	out := new(FavoriteListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoService) CommentAction(ctx context.Context, in *CommentActionRequest, opts ...client.CallOption) (*CommentActionResponse, error) {
	req := c.c.NewRequest(c.name, "VideoService.CommentAction", in)
	out := new(CommentActionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoService) CommentList(ctx context.Context, in *CommentListRequest, opts ...client.CallOption) (*CommentListResponse, error) {
	req := c.c.NewRequest(c.name, "VideoService.CommentList", in)
	out := new(CommentListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VideoService service

type VideoServiceHandler interface {
	FeedInfo(context.Context, *FeedRequest, *FeedResponse) error
	PublishAction(context.Context, *PublishActionRequest, *PublishActionResponse) error
	PublishList(context.Context, *PublishListRequest, *PublishListResponse) error
	FavoriteAction(context.Context, *FavoriteActionRequest, *FavoriteActionResponse) error
	FavoriteList(context.Context, *FavoriteListRequest, *FavoriteListResponse) error
	CommentAction(context.Context, *CommentActionRequest, *CommentActionResponse) error
	CommentList(context.Context, *CommentListRequest, *CommentListResponse) error
}

func RegisterVideoServiceHandler(s server.Server, hdlr VideoServiceHandler, opts ...server.HandlerOption) error {
	type videoService interface {
		FeedInfo(ctx context.Context, in *FeedRequest, out *FeedResponse) error
		PublishAction(ctx context.Context, in *PublishActionRequest, out *PublishActionResponse) error
		PublishList(ctx context.Context, in *PublishListRequest, out *PublishListResponse) error
		FavoriteAction(ctx context.Context, in *FavoriteActionRequest, out *FavoriteActionResponse) error
		FavoriteList(ctx context.Context, in *FavoriteListRequest, out *FavoriteListResponse) error
		CommentAction(ctx context.Context, in *CommentActionRequest, out *CommentActionResponse) error
		CommentList(ctx context.Context, in *CommentListRequest, out *CommentListResponse) error
	}
	type VideoService struct {
		videoService
	}
	h := &videoServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&VideoService{h}, opts...))
}

type videoServiceHandler struct {
	VideoServiceHandler
}

func (h *videoServiceHandler) FeedInfo(ctx context.Context, in *FeedRequest, out *FeedResponse) error {
	return h.VideoServiceHandler.FeedInfo(ctx, in, out)
}

func (h *videoServiceHandler) PublishAction(ctx context.Context, in *PublishActionRequest, out *PublishActionResponse) error {
	return h.VideoServiceHandler.PublishAction(ctx, in, out)
}

func (h *videoServiceHandler) PublishList(ctx context.Context, in *PublishListRequest, out *PublishListResponse) error {
	return h.VideoServiceHandler.PublishList(ctx, in, out)
}

func (h *videoServiceHandler) FavoriteAction(ctx context.Context, in *FavoriteActionRequest, out *FavoriteActionResponse) error {
	return h.VideoServiceHandler.FavoriteAction(ctx, in, out)
}

func (h *videoServiceHandler) FavoriteList(ctx context.Context, in *FavoriteListRequest, out *FavoriteListResponse) error {
	return h.VideoServiceHandler.FavoriteList(ctx, in, out)
}

func (h *videoServiceHandler) CommentAction(ctx context.Context, in *CommentActionRequest, out *CommentActionResponse) error {
	return h.VideoServiceHandler.CommentAction(ctx, in, out)
}

func (h *videoServiceHandler) CommentList(ctx context.Context, in *CommentListRequest, out *CommentListResponse) error {
	return h.VideoServiceHandler.CommentList(ctx, in, out)
}
